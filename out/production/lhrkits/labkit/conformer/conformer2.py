#!/usr/bin/env python# -*- coding: utf-8 -*-# @Author  : lhr (airhenry@gmail.com)# @Link    : http://about.me/air.henry"""Usage:    tmpelate.py  [-q | --quiet] [-l | --log] [-d | --debug]    tmpelate.py (-h | --help)    tmpelate.py --versionOptions:    -h --help     Show this screen.    --version     Show version.    -l --log      Logging in makemd.log file.    -q --quiet    Quiet output.    -d --debug    Debug output.Notes:   my tmpelate"""from docopt import docoptimport os, sys, re, shfrom glob import globimport yaml, loggingimport mypubimport crash_on_ipyimport mylogimport shimport tempfileclass Conformer():    '''    存储构型的信息, 包括输入参数, 计算方法, 计算结果,    '''    def __init__(self,from_method='',in_parameters='',xyz='',father=''):        self.from_method=from_method  # origin, hf/3-21G*, etc..        self.in_parameters=in_parameters        self.out_parameters=''  # energy, etc..        self.xyz=xyz  #存储构型        self.father=father        # self.calc_fun=''    def run(self,fun):        #接受一个函数, 以conformer为对象, 进行操作. 返回成功与否        if fun(self):            self.calc_method=fun.__name__        return True    def get_pdb(self,flag='xyz'):        if flag=='xyz':            xyz=self.xyz        else:            xyz=self.father_xyz        xyz_file= tempfile.NamedTemporaryFile()        pdb_file = tempfile.NamedTemporaryFile()        xyz_file.write(xyz)        xyz_file.seek(0)        # print xyz_file.read()        # command="babel -ixyz xyz_file.name "        # print pdb_file.name        sh.babel("-ixyz",xyz_file.name,"-opdb",pdb_file.name)        pdb_file.seek(0)        pdb= pdb_file.read()        xyz_file.close()        pdb_file.close()        return pdb    def get_xyz(self):        return self.xyz    def get_father_xyz(self):        return self.father_xyz    def get_father_pdb(self):        return self.get_pdb("father_xyz")def func(conf):    print conf.nameconf=Conformer(xyz='''240 1H	20.800000 7.440000 7.800000C	20.040000 8.160000 8.090000H	19.070000 7.680000 7.980000H	20.260000 9.070000 7.530000C	20.140000 8.560000 9.560000O	19.460000 8.000000 10.420000N	21.140000 9.340000 9.970000H	21.750000 9.750000 9.290000C	21.270000 9.810000 11.340000H	21.270000 8.930000 11.970000C	22.660000 10.410000 11.460000H	22.650000 11.320000 10.860000H	23.360000 9.780000 10.910000C	23.190000 10.500000 12.890000O	23.550000 9.470000 13.500000O	23.210000 11.590000 13.500000C	20.250000 10.840000 11.830000O	19.880000 10.750000 13.000000N	19.730000 11.680000 10.930000H	20.180000 11.800000 10.030000C	18.830000 12.770000 11.240000H	17.970000 12.370000 11.760000H	19.330000 13.560000 11.810000H	18.410000 13.130000 10.300000'''  )print conf.get_pdb()def main(logger=mylog.default_logger()):    arguments = docopt(__doc__, version='0.0')    self_name = os.path.basename(sys.argv[0])    # logfile=self_name.replace('py','log')    # logger=set_mylogger(arguments,logfile)    # main_config=load_config('.ll')    # dir_name=os.path.basename(os.getcwd())    # test_file_name='test.txt'    # test_file=open(test_file_name, 'w')    # test_file.close()if __name__ == '__main__':    main()